class Solution {
    public int maxProfit(int[] prices) {
        
        int minP=Integer.MAX_VALUE;
        int maxProfit =0 ;
        for(int i = 0; i< prices.length ; i++){
            if(prices[i] < minP){
                minP = prices[i];
                
            }
            maxProfit =Math.max(prices[i] - minP , maxProfit);
        }
            return maxProfit;

//         ------------------------------------------------------
       //  int[] left = new int[prices.length];
       //  int[] right = new int[prices.length];
       //  left[0] = prices[0];
       //  right[prices.length-1] = prices[prices.length-1];
       //  // int min=0;
       //  // int max =0;
       //  for(int i = 1; i < prices.length ; i++){
       //      left[i]=Math.min(left[i-1], prices[i]);
       //  }
       //  for(int j =prices.length - 2 ; j >=0 ; j--){
       //     right[j] = Math.max(right[j+1] , prices[j]);
       //  }
       // int max =0;
       //  for(int i =0; i< prices.length ; i++){
       //      max= Math.max(max , right[i] - left[i]);
       //  }
       //  return max;
        
    }
}
